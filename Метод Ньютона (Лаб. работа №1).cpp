//Подключение необходимых библиотек 
#include <iostream>
#include <clocale>
#include <cmath> 
using namespace std;
int main()
{
    setlocale(LC_ALL, "RU");
    double a, b, f1a, f1b, f1app, f1bpp, x0, y0, f1p, x1, E, x00, Xmain, nn; // Выделение памати для всех необходимых переменных
    cout << "Введите промежуток [a:b] внутри которого функция будет непрерывна и внутри которого необходимо найти x для функции: " << endl << "0,1x^2 – x * ln(x) = 0" << endl;
    cin >> a >> b; //Промежуток [a;b]
    f1a = 0.1 * pow(a, 2) - a * log(a); // f'(a)
    f1b = 0.1 * pow(b, 2) - b * log(b); // f'(b)
    f1app = 0.2 - (1 / a); // f''(a)
    f1bpp = 0.2 - (1 / b); // f''(b)
    if ((f1a * f1app) > 0) { //Условие для точки x0 = a
        cout << "т.к f(a) * f’’(a) > 0, x0 = a" << endl;
        x0 = a;
    }
    if ((f1b * f1bpp) > 0) { //Условие для точки x0 = b
        cout << "т.к f(b) * f’’(b) > 0, x0 = b" << endl;
        x0 = b;
    }
    if (((f1a * f1app) < 0) and ((f1b * f1bpp) < 0)) // Условие, если x0!=a и x0!=b
        cout << "Неправильно введён промежуток";
    E = 0.0001; // Константа для точности вычисления корня
    y0 = 0.1 * pow(x0, 2) - x0 * log(x0); // f(x0)
    f1p = 0.2 * x0 - log(x0) - 1; // f'(x0)
    x1 = (f1p * x0 - y0) / f1p; // Точка x1 пересечения касательной проведенной через точку х0 и Ох
    x00 = x0; // Переменная для хранения х0
    x0 = x1; // Перемещение х0 на место x1
    nn = 1;// Счетчик количества совершенных итераций
    while (abs((x1 - x00)) >= E) { // Цикл совершающий итерации до тех пор, пока разница между точками х1 и х0 не станет меньше чем E
        y0 = 0.1 * pow(x0, 2) - x0 * log(x0);
        f1p = 0.2 * x0 - log(x0) - 1;
        x1 = (f1p * x0 - y0) / f1p;
        x00 = x0;
        x0 = x1;
        nn++;
        Xmain = x0 - ((0.1 * pow(x0, 2) - x0 * log(x0)) / (0.2 * x0 - log(x0) - 1)); // Подсчет корня по формуле x = x0 - (f(x0) / f’(x0))
    }
    cout << "Программа произвела " << nn << " итераций, конечный x с точностью более чем 0.0001: " << x0 << endl; // Вывод корня после завершения цикла с итерациями
    cout << "x с точностью более чем 0.0001 по формуле  x = x0 - (f(x0) / f’(x0)): " << Xmain;
    return 0;
}


